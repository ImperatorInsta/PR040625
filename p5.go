// 5.	–°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–∫—Ü–∏–π. –ö–æ–≥–¥–∞ —Ü–µ–Ω–∞ –∞–∫—Ü–∏–π –∏–∑–º–µ–Ω—è–µ—Ç—Å—è, –≤—Å–µ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–æ–ª–∂–Ω—ã –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
//–í–∞–∂–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã:
//ÔÉò	–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤.
//ÔÉò	–°–ª–µ–¥–∏—Ç–µ –∑–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é, —á—Ç–æ–±—ã –∏–∑–±–µ–≥–∞—Ç—å –∏–∑–ª–∏—à–Ω–µ–π –Ω–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è.

package main

import (
	"fmt"
	"math/rand"
	"sync"
	"time"
)

type Stock struct {
	Symbol    string
	Name      string
	Price     float64
	LastPrice float64
	mutex     sync.RWMutex
}

func NewStock(symbol, name string, initialPrice float64) *Stock {
	return &Stock{
		Symbol:    symbol,
		Name:      name,
		Price:     initialPrice,
		LastPrice: initialPrice,
	}
}

func (s *Stock) UpdatePrice(newPrice float64) {
	s.mutex.Lock()
	defer s.mutex.Unlock()

	s.LastPrice = s.Price
	s.Price = newPrice
}

func (s *Stock) GetPrice() float64 {
	s.mutex.RLock()
	defer s.mutex.RUnlock()
	return s.Price
}

func (s *Stock) GetPriceChange() (float64, float64) {
	s.mutex.RLock()
	defer s.mutex.RUnlock()

	change := s.Price - s.LastPrice
	changePercent := 0.0
	if s.LastPrice != 0 {
		changePercent = (change / s.LastPrice) * 100
	}

	return change, changePercent
}

func (s *Stock) String() string {
	change, changePercent := s.GetPriceChange()
	changeSymbol := ""
	if change > 0 {
		changeSymbol = "‚Üó"
	} else if change < 0 {
		changeSymbol = "‚Üò"
	} else {
		changeSymbol = "‚Üí"
	}

	return fmt.Sprintf("%s (%s): $%.2f %s (%.2f, %.2f%%)",
		s.Symbol, s.Name, s.Price, changeSymbol, change, changePercent)
}

type Observer interface {
	Update(stock *Stock, change float64, changePercent float64)
}

type Subscriber struct {
	Name           string
	MinChangeAlert float64
}

func (sub *Subscriber) Update(stock *Stock, change float64, changePercent float64) {
	if abs(changePercent) >= sub.MinChangeAlert {
		fmt.Printf("üîî [%s] –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è %s: %s –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –Ω–∞ %.2f%% (%.2f)\n",
			time.Now().Format("15:04:05"), sub.Name, stock.Symbol, changePercent, change)
	}
}

func abs(x float64) float64 {
	if x < 0 {
		return -x
	}
	return x
}

type StockTracker struct {
	stocks    map[string]*Stock
	observers []Observer
	mutex     sync.RWMutex
}

func NewStockTracker() *StockTracker {
	return &StockTracker{
		stocks:    make(map[string]*Stock),
		observers: make([]Observer, 0),
	}
}

func (st *StockTracker) AddStock(stock *Stock) {
	st.mutex.Lock()
	defer st.mutex.Unlock()

	st.stocks[stock.Symbol] = stock
	fmt.Printf("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∞–∫—Ü–∏—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è: %s\n", stock)
}

func (st *StockTracker) Subscribe(observer Observer) {
	st.mutex.Lock()
	defer st.mutex.Unlock()

	st.observers = append(st.observers, observer)
	if sub, ok := observer.(*Subscriber); ok {
		fmt.Printf("üë§ –ù–æ–≤—ã–π –ø–æ–¥–ø–∏—Å—á–∏–∫: %s (–º–∏–Ω. –∏–∑–º–µ–Ω–µ–Ω–∏–µ: %.1f%%)\n",
			sub.Name, sub.MinChangeAlert)
	}
}

func (st *StockTracker) UpdateStockPrice(symbol string, newPrice float64) error {
	st.mutex.RLock()
	stock, exists := st.stocks[symbol]
	st.mutex.RUnlock()

	if !exists {
		return fmt.Errorf("–∞–∫—Ü–∏—è %s –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", symbol)
	}

	stock.UpdatePrice(newPrice)

	change, changePercent := stock.GetPriceChange()

	st.mutex.RLock()
	observers := make([]Observer, len(st.observers))
	copy(observers, st.observers)
	st.mutex.RUnlock()

	for _, observer := range observers {
		observer.Update(stock, change, changePercent)
	}

	return nil
}

func (st *StockTracker) GetAllStocks() []*Stock {
	st.mutex.RLock()
	defer st.mutex.RUnlock()

	stocks := make([]*Stock, 0, len(st.stocks))
	for _, stock := range st.stocks {
		stocks = append(stocks, stock)
	}
	return stocks
}

func (st *StockTracker) PrintPortfolio() {
	fmt.Println("\nüìä === –¢–ï–ö–£–©–ï–ï –°–û–°–¢–û–Ø–ù–ò–ï –ü–û–†–¢–§–ï–õ–Ø ===")
	stocks := st.GetAllStocks()

	if len(stocks) == 0 {
		fmt.Println("–ü–æ—Ä—Ç—Ñ–µ–ª—å –ø—É—Å—Ç")
		return
	}

	for _, stock := range stocks {
		fmt.Println(stock)
	}
	fmt.Println("=====================================")
}

func (st *StockTracker) SimulateMarket(duration time.Duration, interval time.Duration) {
	fmt.Printf("üé≤ –ó–∞–ø—É—Å–∫ —Å–∏–º—É–ª—è—Ü–∏–∏ —Ä—ã–Ω–∫–∞ –Ω–∞ %v (–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ %v)\n", duration, interval)

	ticker := time.NewTicker(interval)
	timeout := time.After(duration)

	defer ticker.Stop()

	for {
		select {
		case <-ticker.C:
			stocks := st.GetAllStocks()
			if len(stocks) > 0 {
				stock := stocks[rand.Intn(len(stocks))]
				currentPrice := stock.GetPrice()

				changePercent := (rand.Float64() - 0.5) * 20
				newPrice := currentPrice * (1 + changePercent/100)

				if newPrice < 0.01 {
					newPrice = 0.01
				}

				st.UpdateStockPrice(stock.Symbol, newPrice)
			}

		case <-timeout:
			fmt.Println("‚è∞ –°–∏–º—É–ª—è—Ü–∏—è —Ä—ã–Ω–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
			return
		}
	}
}

func main() {
	tracker := NewStockTracker()

	fmt.Println("üöÄ === –°–ò–°–¢–ï–ú–ê –û–¢–°–õ–ï–ñ–ò–í–ê–ù–ò–Ø –ê–ö–¶–ò–ô ===")

	stocks := []*Stock{
		NewStock("AAPL", "Apple Inc.", 150.00),
		NewStock("GOOGL", "Alphabet Inc.", 2500.00),
		NewStock("TSLA", "Tesla Inc.", 800.00),
		NewStock("MSFT", "Microsoft Corp.", 300.00),
		NewStock("AMZN", "Amazon.com Inc.", 3200.00),
	}

	for _, stock := range stocks {
		tracker.AddStock(stock)
	}

	subscribers := []*Subscriber{
		{"Alice (–ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π –∏–Ω–≤–µ—Å—Ç–æ—Ä)", 2.0},
		{"Bob (–ê–∫—Ç–∏–≤–Ω—ã–π —Ç—Ä–µ–π–¥–µ—Ä)", 1.0},
		{"Charlie (–î–Ω–µ–≤–Ω–æ–π —Ç—Ä–µ–π–¥–µ—Ä)", 0.5},
	}

	for _, sub := range subscribers {
		tracker.Subscribe(sub)
	}

	tracker.PrintPortfolio()

	fmt.Println("\nüîÑ === –†–£–ß–ù–´–ï –û–ë–ù–û–í–õ–ï–ù–ò–Ø ===")
	tracker.UpdateStockPrice("AAPL", 155.50)
	tracker.UpdateStockPrice("TSLA", 792.00)
	tracker.UpdateStockPrice("GOOGL", 2525.00)

	time.Sleep(1 * time.Second)
	tracker.PrintPortfolio()

	fmt.Println("\nüéØ === –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –°–ò–ú–£–õ–Ø–¶–ò–Ø ===")
	rand.Seed(time.Now().UnixNano())

	go tracker.SimulateMarket(10*time.Second, 500*time.Millisecond)
	go tracker.SimulateMarket(10*time.Second, 500*time.Millisecond)

	for i := 0; i < 5; i++ {
		time.Sleep(2 * time.Second)
		tracker.PrintPortfolio()
	}

	time.Sleep(1 * time.Second)
	fmt.Println("\nüèÅ === –§–ò–ù–ê–õ–¨–ù–û–ï –°–û–°–¢–û–Ø–ù–ò–ï ===")
	tracker.PrintPortfolio()
	fmt.Println("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")
	fmt.Scanln()
}
